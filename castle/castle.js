// title:   Castle Prototype
// author:  game developer, email, etc.
// desc:    short description
// site:    website link
// license: MIT License (change this to your license of choice)
// version: 0.1
// script:  js

let t = 0

const G_FORCE = 1

const TILE_FLAG_OPEN = 0
const TILE_FLAG_WALKABLE = 1
const TILE_FLAG_STAIRS = 2
const TILE_FLAG_SOLID = 3
const TILE_FLAG_DOOR = 4


function can_walk(e, vx, vy) {
	// return can_move({x:e.x+vx,y:e.y,p:{X:e.x,y:e.y}})

	if (vx != 0 && can_move({ x: e.x + vx, y: e.y, p: { X: e.x, y: e.y } })) return true
	if (vy > 0 && can_move({ x: e.x, y: e.y + vy, p: { X: e.x, y: e.y } })) return true
	// if (vy<0&&is_stair(e.x,e.y+vy)) return true
	return false
	// let bounderies=e.bounderies()
	// for (const k in bounderies) {
	// 	if (vx!=0&&!can_pass(bounderies[k].x+vx,bounderies[k].y)) return false
	// 	if (vy>0&&!can_pass(bounderies[k].x,bounderies[k].y+vy)) return false
	// 	if (vy<0&&!is_stair(bounderies[k].x,bounderies[k].y+vy)) return false
	// }
	// return true
	const rules = [
		vx != 0 && can_move({ x: e.x + vx, y: e.y, p: { X: e.x, y: e.y } }),
		vy != 0 && can_move({ x: e.x, y: e.y + vy, p: { X: e.x, y: e.y } })
	]
	return rules.reduce((p, c) => { return p || c; }, false)
}
function can_pass(x, y) {
	let tx = Math.floor(x / 8)
	let ty = Math.floor(y / 8)
	if (tx < 0 || ty < 0) return false
	return fget(mget(tx, ty), TILE_FLAG_OPEN)
	// return (mget(tx,ty)>=0&&mget(tx,ty)<=31)
}
function is_stair(x, y) {
	const colors = [2]
	return colors.includes(pix(x, y))
}
const colors = []
colors[TILE_FLAG_WALKABLE] = []
colors[TILE_FLAG_STAIRS] = [2]
colors[TILE_FLAG_SOLID] = [1, 2, 7]
colors[TILE_FLAG_OPEN] = [0, 3, 4, 9, 13]
colors[TILE_FLAG_DOOR] = [9]
const pix_cache = [];

function is_px(x, y, type) {
	if (pix_cache[x] == undefined) pix_cache[x] = []
	if (pix_cache[x][y] == undefined) pix_cache[x][y] = pix(x, y)
	return colors[type].includes(pix_cache[x][y])
	// return colors[type].includes(pix(x, y))
}
function can_move(pos) {
	if(pos.x<0||pos.x>240||pos.y<0||pos.y>136) return false;
	const prev = pos.p
	// if (pos.x==prev.x&&pos.y-1==prev.y) return false;
	const rules = [
		is_px(pos.x,pos.y,TILE_FLAG_WALKABLE),
		is_px(pos.x,pos.y,TILE_FLAG_OPEN) && pos.y>prev.y,
		is_px(pos.x,pos.y,TILE_FLAG_OPEN) && is_px(prev.x,prev.y+1,TILE_FLAG_SOLID),
		is_px(pos.x,pos.y+1,TILE_FLAG_SOLID)  && is_px(pos.x,pos.y,TILE_FLAG_OPEN),
		is_px(pos.x,pos.y,TILE_FLAG_STAIRS) && is_px(prev.x,prev.y,TILE_FLAG_OPEN) && pos.y==prev.y,
	]
	return rules.reduce((p, c) => { return p || c; }, false)
}

let queue = []
var visited = []

function check_next_pos(pos, it, target_pos) {
	if (visited.includes("x" + pos.x + "y" + pos.y)) return;
	if (!can_move(pos)) return;

	visited.push("x" + pos.x + "y" + pos.y)
	if (pos.x == target_pos.x && pos.y == target_pos.y) {
		queue = []
		let previous = pos.p
		while (!!previous) {
			queue.push(previous)
			previous = previous.p
		}
	}
	if (it > 50) return;
	it++
	// queue.push(pos)

	check_next_pos({x:pos.x-1,y:pos.y-1,p:pos},it,target_pos) //up-left
	check_next_pos({x:pos.x+1,y:pos.y-1,p:pos},it,target_pos) //up-rigth

	check_next_pos({x:pos.x,y:pos.y+1,p:pos},it,target_pos) //down
	check_next_pos({x:pos.x-1,y:pos.y+1,p:pos},it,target_pos) //down-left
	check_next_pos({x:pos.x+1,y:pos.y+1,p:pos},it,target_pos) //down-right

	check_next_pos({x:pos.x-1,y:pos.y,p:pos},it,target_pos) //left
	check_next_pos({x:pos.x+1,y:pos.y,p:pos},it,target_pos) //right
}

function path_to(e, tx, ty) {
	visited = []
	queue = []

	let start_pos = { x: e.x, y: e.y, p:{x: e.x, y: e.y} }
	let target_pos = { x: tx, y: ty }

	check_next_pos(start_pos, 0, target_pos)
}

function pathfinder() {
	m = mouse()
	path_to(Player, m[0]-1, m[1]-1)
}

const Player = {
	x: 10*8, y: 10*8,
	vx: 0, vy: 0,
	speed: 1,
	flip: 0,
	bounderies() { return [{ x: this.x, y: this.y }, { x: this.x, y: this.y - 4 }] },
	update() {
		if (btn(0)) Player.vy = this.speed * -1
		else if (btn(1)) Player.vy = this.speed
		else Player.vy = 0
		this.flip = -1

		if (btn(2)) {
			Player.vx = this.speed * -1
			this.flip = 1
		} else if (btn(3)) {
			Player.vx = this.speed
			this.flip = 0
		} else Player.vx = 0

		if (!is_px(this.x, this.y + 1, TILE_FLAG_SOLID)) {
			this.vy += G_FORCE
		}

		// if (can_move({ x: this.x + this.vx, y: this.y, p: { x: this.x, y: this.y } })) this.x += this.vx
		// if (can_move({ x: this.x, y: this.y + this.vy, p: { x: this.x, y: this.y } })) this.y += this.vy
		if (can_move({ x: this.x+this.vx, y: this.y + this.vy, p: { x: this.x, y: this.y } })) {
			this.y += this.vy
			this.x += this.vx
		}

		if (this.vx != 0 && this.vy < 0 && is_px(this.x + this.vx, this.y, TILE_FLAG_SOLID)) this.y -= 1

		// if (this.vx > 0 && this.vy == 0 && is_px(this.x + this.vx, this.y, TILE_FLAG_STAIRS)) this.x += 1
		// if (this.vx < 0 && this.vy == 0 && is_px(this.x + this.vx, this.y, TILE_FLAG_STAIRS)) this.x -= 1
	},
	draw() {spr(256, this.x - 3, this.y - 7, 15, 1)}
}

const Workers={
	price:10,
	idle:3,
	wood:0,
	stone:0,
	qtd(){
		return this.idle+this.wood+this.stone
	}
}
const Castle={
	floors:1,
	build_floor(){
		if(Resources.stone.qtd>=5 && Resources.wood.qtd>=1){
			Resources.stone.qtd-=5
			Resources.wood.qtd-=1	
			Castle.floors++
			sfx(1,"C-",5)
		} else {
			sfx(0,"F-",5)
		}
	},
	draw(){
		// spr(80,96,112)
		let x=96
		let y=104
		spr(80,x,y,15,1,0,0,7,2)
		spr(32,x,y-(8),15,1,0,0,7,1)
		for (let i = 0; i < this.floors; i++) {
			spr(32,x,y-(8*3)-(16*i),15,1,0,0,7,3)
		}
		spr(19,x+(8*3),y-(8*2)-(16*this.floors),15,1,0,0,1,1)

	}
}
const World = {
	update() { },
	draw() {
		map(0, 0, 30, 17, 0, 0, 13, 1)
	},
}

const Resources={
	wood:{
		qtd:0,
		rate:1,
		update(t){
			if((t/60)%3==0){this.qtd+=this.rate*Workers.wood}
		}
	},
	stone:{
		qtd:0,
		rate:1,
		update(t){
			if((t/60)%3==0){this.qtd+=this.rate*Workers.stone}
		}
	}
}

const UI = {
	draw(){
		// vbank(1) //switch to vram bank 1
		// poke(0x03FF8, 13)//set palette entry 13 to transparent
		// cls(13)//clear the overlay layer (fully transparent, all index 2)
		// print("Stone",10,30)
		// print("Wood",10,40)
		// print("Food",10,50)
		print("Castle floors:"+Castle.floors,10,30)
		let y_stats=10
		print("Workers:"+Workers.qtd(),180,y_stats)
		print("idle:"+Workers.idle,180,y_stats+10)
		print("wood:"+Workers.wood,180,y_stats+20)
		print("stone:"+Workers.stone,180,y_stats+30)

		spr(272,32,88, 15, 1)
		print(Workers.wood,42,88)
		spr(273,48,88, 15, 1)
		
		spr(272,208,96, 15, 1)
		print(Workers.stone,218,96)
		spr(273,224,96, 15, 1)

		spr(274,10,10, 15, 1,0,0,4)
		spr(278,10,20, 15, 1,0,0,4)

		y_stats=40
		print("t:"+t+" "+(t/60),10,y_stats)
		print("wood:"+Resources.wood.qtd,10,y_stats+10)
		print("stone:"+Resources.stone.qtd,10,y_stats+20)

		let m=mouse()
		print("mx:"+m[0]+" my:"+m[1]+" "+m[2],50,10)
	},
	update(){
		// let mx,my,mbtn = mousep()
		// print("mx:"+mx+" my:"+my+" "+mbtn,50,10)
		let m = mousep()
		if(m[2] && m[0]>=32 && m[1]>=88 && m[0]<=32+8 && m[1]<=88+8){
			if(Workers.idle>0) {
				Workers.wood++
				Workers.idle--
			}
		}
		if(m[2] && m[0]>=48 && m[1]>=88 && m[0]<=48+8 && m[1]<=88+8){
			if(Workers.wood>0) {
				Workers.wood--
				Workers.idle++
			}
		}

		if(m[2] && m[0]>=208 && m[1]>=96 && m[0]<=208+8 && m[1]<=96+8){
			if(Workers.idle>0) {
				Workers.stone++
				Workers.idle--
			}
		}
		if(m[2] && m[0]>=224 && m[1]>=96 && m[0]<=224+8 && m[1]<=96+8){
			if(Workers.stone>0) {
				Workers.stone--
				Workers.idle++
			}
		}

		if(m[2] && m[0]>=10 && m[1]>=10 && m[0]<=10+(8*4) && m[1]<=10+8){
			Workers.idle++

			sfx(1,"C-",5)
		}
		if(m[2] && m[0]>=10 && m[1]>=20 && m[0]<=10+(8*4) && m[1]<=20+8){
			Castle.build_floor()
		}

	}
}

let Debug = {
	draw() {
		m = mouse()
		let tx = Math.floor(m[0] / 8)
		let ty = Math.floor(m[1] / 8)

		print(m[2], 10, 10)
		print("mx:" + m[0] + " my:" + m[1], 10, 20)
		print("tx:" + tx + " ty:" + ty, 10, 30)
	}
}
function draw_overlay() {
	vbank(1) //switch to vram bank 1
	poke(0x03FF8, 13)//set palette entry 13 to transparent
	cls(13)//clear the overlay layer (fully transparent, all index 2)
	// -- draw your custom overlay graphics here

	for(var y=0;y<16;y++){
		for(var x=30;x<59;x++){
			spr(mget(x,y), (x*8)-(30*8), (y*8), 15)
		}
	}

	let c=5
	queue.forEach(p => {
		rect(p.x,p.y, 1, 1, c)
		c=11
	});
}

function TIC() {
	vbank(0)
	Player.update()
	UI.update()

	Resources.wood.update(t)
	Resources.stone.update(t)


	cls(13)

	World.draw()
	Castle.draw()
	
	for (let i = 0; i < 240; i++) {
		for (let ii = 0; ii < 136; ii++) {
			if (pix_cache[i] == undefined) pix_cache[i] = []
			if (pix_cache[i][ii] == undefined) pix_cache[i][ii] = pix(i, ii)
			}		
	}
	pathfinder()

	Player.draw()
	UI.draw()
	draw_overlay()

	// Debug.draw()

	t++
}

LAST_MB = false
function mousep() {
	let m = mouse()
	let isNewPress = m[2] && !LAST_MB
	LAST_MB = m[2]
	return [m[0],m[1],isNewPress]
}
// <TILES>
// 000:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 001:7777777777777777777777777778887788888888888888888888888888888888
// 002:8888888888888118888881188888888888118888811118888811888888888888
// 010:dddddddd0dd00dd00dd00dd00000000011111111444444444444444444444444
// 011:dd9934440d9934440d9934440099344411111111444444444444444444444444
// 012:dddddddddddddddd1d1d1d1d1111111d1111111d1333331d1334331d1344439d
// 013:ddddddddd11dd00dd11dd00dd1100000d1111111d1111344dd113444dd113444
// 014:ddddddddd00dd11dd00dd11d0000011d1111111d4431111d444311dd444311dd
// 015:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 019:dddddddddddddddd1d1d1d1d1111111d1111111d1333331d1334331d1344439d
// 026:1344431d1344431d1344431d1344431013444111134423341342334413244344
// 027:444399dd444399d0444399d04443990011111111444444444444444444444444
// 028:1144439d1124439d1342439d1344239013444111134423341342334413244344
// 029:ddddddddd00dd00dd00dd00d0000000011111111444444444444444444444444
// 030:ddddddddd00dd11dd00dd11d0000011d1111111d4431111d444311dd444311dd
// 031:ddddddddd11dd00dd11dd00dd1100000d1111111d1111344dd113444dd113444
// 032:ddddddddddddddddddddddddddddddddddddddddd11dd00dd11dd00dd1100000
// 033:ddddddddddddddddddddddddddddddddddddddddd00dd00dd00dd00d00000000
// 034:ddddddddddddddddddddddddddddddddddddddddd00dd00dd00dd00d00000000
// 035:1144439d1324439d1432439d1443239014443111144423111442341114234411
// 036:ddddddddd00dd00dd00dd00d0000000011111111111111111133333313444444
// 037:ddddddddd00dd00dd00dd00d0000000011111111111111113333333344444444
// 038:ddddddddd00dd11dd00dd11d0000011d1111111d1111111d331111dd4431111d
// 040:ddddddddddddddddddddddddddddddddddddddddd00dd11dd00dd11d0000011d
// 042:ddddddddddddddddddddddddddddddddddddddddd11dd00dd11dd00dd1100000
// 043:ddddddddddddddddddddddddddddddddddddddddd00dd00dd00dd00d00000000
// 044:1144434411244344134243449344234493444111934423349342334493244344
// 045:4444444444444444444444444444444411111111444444444444444444444444
// 046:444311dd444311dd444311dd444311dd1111111d4431111d444311dd444311dd
// 047:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 048:d1111111d1111111dd111133d1111344dd113444dd113444dd113444dd113444
// 049:1111111111111111333333334444444444444444444444444444444444444444
// 050:1111111111111111333331114444431144444431444444314444443144444431
// 051:1144441113244411143244111443241114443111144423111442343914234449
// 052:3444444434444444344444443444444434444444344444443444444434444444
// 053:4444444444444444444444444444444444444444444444444444444444444444
// 054:444311dd444311dd444311dd444311dd444311dd444311dd444311dd444311dd
// 056:1111111d1111111d331111dd4431111d444311dd444311dd444311dd444311dd
// 058:d1111111d1111344dd113444dd113444dd113444dd113444dd113444dd113444
// 059:1111111144444444444444444444444444444444444444444444444444444444
// 060:1144434431244344434243444344234443444111434423344342334443244344
// 061:4444444444444444444444444444444411111111444444444444444444444444
// 062:444311dd444311dd444311dd444311dd1111111d4431111d444311dd444311dd
// 063:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 064:dd113444dd113444dd113444dd113444dd113444dd113444dd113444dd113444
// 065:4444444444444444444444444444444444444444444444444444444444444444
// 066:4444443144444431444444394444443944444439444444394444443944444439
// 067:1234444913244449343244494443244944443111444423114442341144234411
// 068:3444444434444444344444443444444411111111111111111133333313444444
// 069:4444444444444444444444444444444411111111111111113333333344444444
// 070:444311dd444311dd444311dd444311dd1111111d1111111d331111dd4431111d
// 071:444311dd444311dd444311dd444311dd1111111d1111111d331111dd4431111d
// 072:444311dd444311dd444311dd444311dd444311dd444311dd444311dd444311dd
// 074:d1111111d1111344dd113444dd993444dd993444dd993444dd993444dd993444
// 075:1111111144444444444444444444444444444444444444444444444444444444
// 076:1144434431244344434243444344234443444111434421114342111143211111
// 077:4444444444444444444444444444444411111111111111111111111111111111
// 078:444311dd444311dd444311dd444311dd111111dd111111dd111111dd111111dd
// 079:dd113444dd113444dd113444dd113444dd111111dd111111dd111111dd111111
// 080:d1111111d1111111dd111133d1111344dd113444dd113444dd113444dd113444
// 081:1111111111111111333333334444444444444444444444444444444444444444
// 082:1111111111111111333331114444431144444431444444314444443144444431
// 083:1234441113244411143244111443241114443111144423111442341114234439
// 084:3444444434444444344444443444444434444444344444443444444434444444
// 085:4444444444444444444444444444444444444444444444444444444444444444
// 086:444311dd444311dd444311dd444311dd444311dd444311dd444399dd444399dd
// 087:444311dd444311dd444311dd444311dd4441111d4411111d441111dd44499ddd
// 088:1111111d1111111d331111dd4431111d444311dd444311dd444311dd444311dd
// 090:ddddddddddddddddddddddddddddddddddddddddddddddddddd11dd1ddd11dd1
// 091:dddddddddddddddddddddddddddddddddddddddddddddddd1dd11dd11dd11dd1
// 092:dddddddddddddddddddddddddddddddddddddddddddddddd1dd11ddd1dd11ddd
// 093:2444444432444444432444444432444444432444444432444444432444444432
// 094:ddddddddddddddddddddddddddddddddddddddddd00dd11dd00dd11d0000011d
// 095:ddddddddddddddddddddddddddddddddddddddddd11dd00dd11dd00dd1100000
// 096:dd113444dd113444dd993444dd993444dd993444dd993444dd993444dd993444
// 097:4444444444444444444444444444444444444444444444444444444444444444
// 098:4444443144444431444444394444443944444439444444394444443944444439
// 099:1234444913244449343244494443244944443111444421114442111144211111
// 100:3444444434444444344444443444444411111111111111111111111111111111
// 101:4444444444444444444444444444444411111111111111111111111111111111
// 102:444399dd444399dd444399dd444399dd111199dd111111dd1111111d11111111
// 103:44499ddd44499ddd44499ddd44499ddd11112ddd111112dd1111112d11111112
// 104:444311dd444311dd444311dd444399dd444399dd444399dd444399dd444399dd
// 106:ddd11111ddd11134dddd1344dddd9344dddd9344d00d9004d00d900400000000
// 107:1111111144444444444444444444444444444444400440044004400400000000
// 108:11111ddd43111ddd4431dddd4439dddd4439dddd4009d00d4009d00d00000000
// 109:4444444444444442444444234444423444442344444234444423444442344444
// 110:1111111d4431111d444311dd444311dd444311dd444311dd444311dd44431100
// 111:d1111111d1111344dd113444dd113444dd113444dd113444dd11344400113444
// 112:5555555555555555555555555555555555555555555555555555555555555555
// 113:5555555555555555555555555555555555555555555555555555555555555555
// 114:5555555555555555555555555555555555555555555555555555555555555555
// 115:5555555555555555555555555555555555555555555555555555555555555555
// 116:5555555555555555555555555555555555555555555555555555555555555555
// 117:5555555555555555555555555555555555555555555555555555555555555555
// 118:5555555555555555555555555555555555555555555555555555555555555555
// 119:5555555555555555555555555555555555555555555555555555555555555555
// 120:5555555555555555555555555555555555555555555555555555555555555555
// 121:5555555555555555555555555555555555555555555555555555555555555555
// 122:5555555555555555555555555555555555555555555555555555555555555555
// 123:5555555555555555555555555555555555555555555555555555555555555555
// 124:5555555555555555555555555555555555555555555555555555555555555555
// 125:5555555555555555555555555555555555555555555555555555555555555555
// 126:5555555555555555555555555555555555555555555555555555555555555555
// 127:5555555555555555555555555555555555555555555555555555555555555555
// 128:dddddddddddddddddddddddddddddddddddd66ddddd6666dd77776667777776d
// 129:dddddddddddddddddddddddddddddddddd66ddddd6666ddd6667777dd6777777
// 130:ddddddddddddddddddddddddddd777dddd77767ddd777777d776777777777767
// 131:dd77777ddd777777d7777177d7777777dd76777ddd77767dd777767dd776777d
// 132:dd77177ddd777777d7777177d7677777dd77177ddd77117ddddd11dddddd11dd
// 134:ddddddddd111111d1222222122222222d300003dd300443dd304443dd304443d
// 177:ddddddddddd11111dd144444d1444444d144444cd144444cd144444cd144cccc
// 178:dddddddd11111ddd444441dd4444441dc444441dc444441dc444441dcccc441d
// 179:ddddddddddd11111dd144444d1444444d1444444d1444444d1444444d144cccc
// 180:dddddddd11111ddd444441dd4444441d4444441d4444441d4444441dcccc441d
// 193:d144ccccd144444cd144444cd144444cd1344444dd133333ddd11111dddddddd
// 194:cccc441dc444441dc444441dc444441d4444431d333331dd11111ddddddddddd
// 195:d144ccccd1444444d1444444d1444444d1344444dd133333ddd11111dddddddd
// 196:cccc441d4444441d4444441d4444441d4444431d333331dd11111ddddddddddd
// 209:d333333d33444433344cc44334cccc4334cccc43344cc44333444433d333333d
// 210:d333333d334444333444444334cccc4334cccc433444444333444433d333333d
// </TILES>

// <TILES1>
// 000:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 001:dddddddddddddddddddddddddddddddddddd66ddddd6666dd77776667777776d
// 002:dd2dd2dddd4444dddd4242dddd4444dddd2222dddd4444dddd2442dddd2dd2dd
// 003:dddddddddddddddddddddddddddddddddddd66ddddd6666dd77776667777776d
// 008:444399dd444399d0444399d04443990011111111444444444444444444444444
// 009:dddddddd0dd00dd00dd00dd00000000011111111444444444444444444444444
// 010:dd9934440d9934440d9934440099344411111111444444444444444444444444
// 011:ddddddddddddddddddddddd1ddddddd1ddddddd1ddddddd1dddddddddddddddd
// 012:dddddddddddddddd1d1d1d111111111111111111133333111334331d1344439d
// 013:ddddddddd11dd00dd11dd00dd1100000d1111111d1111344dd113444dd113444
// 014:ddddddddd00dd11dd00dd11d0000011d1111111d4431111d444311dd444311dd
// 015:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 016:dddddddddddddddddddddddddddddddddddddddddddddddddddddddd88888888
// 017:dddddddddddddddddddddddddddddddddddddddddddddddddddddddd99999999
// 018:dddddddddddddddddddddddddddddddddddddddddddddddddddddddd77777777
// 019:d2dddd2dd222222dd2dddd2dd222222dd2dddd2dd222222dd2dddd2d77777777
// 020:d2dddd2dd222222dd2dddd2dd222222dd2dddd2dd222222dd2dddd2dd222222d
// 021:ddddddddddddddddddddddddddddddddddddddddddddddddd2dddd2dd222222d
// 022:d222222dd2dddd2dd222222dd2dddd2dd222222dd2dddd2dd222222dd2dddd2d
// 023:ddddddddddddddddddddddddddddddddddddddddddddddddddddddddd2dddd2d
// 024:ddddddddddddddddddddddddddddddddddddddddd00dd00dd00dd00d00000000
// 025:ddddddddddddddddddddddddddddddddddddddddddddddddddd11dd1ddd11dd1
// 026:dddddddddddddddddddddddddddddddddddddddddddddddd1dd11dd11dd11dd1
// 027:dddddddddddddddddddddddddddddddddddddddddddddddd1dd11ddd1dd11ddd
// 028:1144439d1124439d1342439d1344239013444111134423341342334413244344
// 029:ddddddddd00dd00dd00dd00d0000000011111111444444444444444444444444
// 030:ddddddddd00dd11dd00dd11d0000011d1111111d4431111d444311dd444311dd
// 031:ddddddddd11dd00dd11dd00dd1100000d1111111d1111344dd113444dd113444
// 032:8888888888888888888888888888888888888888888888888888888888888888
// 033:7777777777777777777777777778887788888888888888888888888888888888
// 034:7777777777777777777777777777777777777777777777777777777777777777
// 035:9aaa9aaa99999999aa9aaa9a999999999aaa9aaa99999999aa9aaa9a99999999
// 036:8888888888888118888881188888888888118888811118888811888888888888
// 039:ddddddddddddddddddddddddddddddddddddddddd00dd11dd00dd11d0000011d
// 040:ddddddddddddddddddddddddddddddddddddddddd11dd00dd11dd00dd1100000
// 041:ddd11111ddd11134dddd1344dddd9344dddd9344d11d9004d11d9004d1100000
// 042:1111111144444444444444444444444444444444400440044004400400000000
// 043:11111ddd43111ddd4431dddd4439dddd4439dddd4009d00d4009d00d00000000
// 044:1144434411244344134243449344234493444111934423349342334493244344
// 045:4444444444444444444444444444444411111111444444444444444444444444
// 046:444311dd444311dd444311dd444311dd1111111d4431111d444311dd444311dd
// 047:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 054:1344431d1344431d1344431d1344431013444111134423341342334413244344
// 055:1111111d4431111d444311dd444311dd444311dd444311dd444311dd444311dd
// 056:d1111111d1111344dd113444dd113444dd113444dd113444dd113444dd113444
// 057:d1111111d1111344dd113444dd113444dd113444dd113444dd113444dd113444
// 058:1111111144444444444444444444444444444444444444444444444444444444
// 059:1111111144444444444444444444444444444444444444444444444444444444
// 060:1144434431244344434243444344234443444111434423344342334443244344
// 061:4444444444444444444444444444444411111111444444444444444444444444
// 062:444311dd444311dd444311dd444311dd1111111d4431111d444311dd444311dd
// 063:dd113444dd113444dd113444dd113444d1111111d1111344dd113444dd113444
// 064:1221222212212222111111111222212212222122111111111221222212212222
// 065:1222212212222122111111112212222122122221111111111222212212222122
// 066:2212222122122221111111112222122222221222111111112212222122122221
// 067:2222122122221221111111112122222121222221111111112222122122221221
// 070:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 071:1111111d4431111d444311dd444399dd444399dd444399dd444399dd444399dd
// 072:d1111111d1111344dd113444dd993444dd993444dd993444dd993444dd993444
// 073:d1111111d1111344dd113444dd993444dd993444dd993444dd993444dd993444
// 074:1111111144444444444444444444444444444444444444444444444444444444
// 075:1111111144444444444444444444444444444444444444444444444444444444
// 076:1144434431244344434243444344234443444111434421114342111143211111
// 077:4444444444444444444444444444444411111111111111111111111111111111
// 078:444311dd444311dd444311dd444311dd111111dd111111dd111111dd111111dd
// 079:dd113444dd113444dd113444dd113444dd111111dd111111dd111111dd111111
// 086:4444444444444442444444234444423444442344444234444423444442344444
// 087:ddddddddddddddddddddddddddddddddddddddddd00dd11dd00dd11d0000011d
// 088:ddddddddddddddddddddddddddddddddddddddddd11dd00dd11dd00dd1100000
// 089:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 090:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 091:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 092:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 093:ddddddddddddddddddddddddddddddddd88d888dd88d888dd8888888d8888888
// 094:dddddddddddddddddddddddddddddddd888d08dd888d08dd888888dd888888dd
// 095:dddddddddddddddddddddddddddddddddddddddddddddddddd8dddddd898dddd
// 102:2444444432444444432444444432444444432444444432444444432444444432
// 103:1111111d4431111d444311dd444311dd444311dd444311dd444311dd44431100
// 104:d1111111d1111344dd113444dd113444dd113444dd113444dd11344400113444
// 105:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 106:ddddddddddddddddddddddddddddddddddddddddd8d888d8d8888888d8888888
// 107:dddddddddddd8dddddd898ddddd898dddd89898ddd18881ddd12221ddd12521d
// 108:ddddddddddd8dddddd898ddddd898dddd89898ddd18881ddd12221ddd12521dd
// 109:ddd11111dd112222dd122211dd122155dd122555dd122555dd122111dd112222
// 110:1111dddd22211ddd12221dd851221dd855221dd855221d8911221d8922211d88
// 111:89898ddd89898ddd989898dd989898dd989898dd8989898d8989898d8888888d
// 117:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 118:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 119:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 120:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 122:dd12221ddd12121ddd12221ddd12221ddd12221ddd12221ddd12221ddd12221d
// 123:dd12221ddd12221ddd12521ddd12221ddd82280dd882280dd8888888dd888888
// 124:d12221ddd12221ddd12521ddd12221ddd88228ddd882288d8888888d888888dd
// 125:ddd11111dd112222dd122222dd121212dd122222dd122222dd122222dd112222
// 126:1111ddd122211d1122221d1212121d1222221d1222221d1222221d1222211d11
// 127:111111dd2222211d2212221d2151221d2555221d2555221d2111221d2222211d
// 133:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 134:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 135:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 136:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 138:dd12221ddd12121ddd12521ddd12121ddd12221ddd12221ddd12221ddd12221d
// 139:ddd11111dd112222dd122211dd122155dd122555dd122555dd122111dd112222
// 140:11111ddd222211dd112221dd551221dd555221dd555221dd111221dd222211dd
// 141:dd111111d1122222d1222111d1221555d1225555d1225555d1221111d1122222
// 142:1111111122222222122221215122252555222525552225251122212122222222
// 143:111111dd2222211d2121221d2525221d2525221d2525221d2121221d2222211d
// 149:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 150:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 151:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 152:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 154:dd12221ddd12121ddd12221ddd12221ddd12221ddd12221ddd12221ddd12221d
// 155:ddd11111dd112222dd122122dd122222dd122222dd122222dd122222dd112222
// 156:11111ddd222211dd221221dd222221dd222221dd222221dd222221dd222211dd
// 157:dd111111d1122222d1222222d1221221d1222222d1222222d1222222d1122222
// 158:1111111122222222222222222212212222222222222222222222222222222222
// 159:111111dd2222211d2222221d1221221d2222221d2222221d2222221d2222211d
// 160:ddddddddddddddddddddddddddddddddddddddddd11dd11dd11dd11dd1111111
// 161:ddddddddddddddddddddddddddddddddddddddddd11dd11dd11dd11d1111111d
// 162:ddddddddddddddddddddddddddddddddddddddddd11dd11dd11dd11dd1111111
// 163:ddddddddddddddddddddddddddddddddddddddddd11dd11dd11dd11d11111111
// 164:ddddddddddddddddddddddddddddddddddddddddd11dd11dd11dd11d1111111d
// 165:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 166:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 167:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 168:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 170:dd12221ddd12121ddd12221ddd12221ddd12221ddd12221ddd12221ddd12221d
// 171:ddd11111dd112222dd122212dd122252dd122252dd122252dd122212dd112222
// 172:11111ddd222211dd212221dd252221dd252221dd252221dd212221dd222211dd
// 173:dd111111d1122222d1221221d1225225d1225225d1225225d1221221d1122222
// 174:1111111122222222221221222252252222522522225225222212212222222222
// 175:111111dd2222211d1221221d5225221d5225221d5225221d1221221d2222211d
// 176:d1111111dd122222dd111121d1212222d1212222d1112202d1221202d1221252
// 177:1111111d222221dd121111dd2222121d2222121d2022111d2021221d2521221d
// 178:d1111111dd122222d1112111d1221222d1221222d1111122d1222212d1222212
// 179:1111111122222222111111112222222222222222222222225525525555255255
// 180:1111111d222221dd1112111d2221221d2221221d2211111d2122221d2122221d
// 181:dddddddddddddddddddddddddddddddddd0dd00dd00dd00dd0000000dd000000
// 182:ddddddddddddddddddddddddddddddddd00dd0ddd00dd00d0000000d000000dd
// 183:ddddddddddddddddddddddddddddddddd00dd00dd00dd00dd0000000d0000000
// 184:ddddddddddddddddddddddddddddddddd00dd00dd00dd00d0000000000000000
// 185:ddddddddddddddddddddddddddddddddd00dd00dd00dd00d0000000d0000000d
// 186:dd12221ddd12121ddd12521ddd12121dd882288dd882288dd8888888d8888888
// 187:ddd11111dd112222dd122122dd122222d8822882d88228828888888888888888
// 188:11111ddd222211dd221221dd222221dd2882288d2882288d8888888888888888
// 189:dd111111d1122222d1222222d1222222d8822882d88228828888888888888888
// 190:2111111211444411143333411433334114333341143333418888888888888888
// 191:111111dd2222211d2222221d2222221d2882288d2882288d8888888d8888888d
// 192:d1111222d1212222d1212222d1111121dd122222dd111212d1222122d1222122
// 193:2221111d2222121d2222121d1211111d222221dd212111dd2212221d2212221d
// 194:d1111122d1221222d1221222d1111122d1222212d1222212d1111111dd122222
// 195:5525525555255255552552553323323322222222222222222222222222222222
// 196:2211111d2221221d2221221d2211111d2122221d2122221d1111111d222221dd
// 197:ddd11111dd112222dd122222dd122122dd122222dd122222dd122222dd112222
// 198:11111ddd222211dd222221dd221221dd222221dd222221dd222221dd222211dd
// 199:dd111111d1122222d1221222d1222255d1222255d1222255d1222211d1122222
// 200:1111111122222222212222122225522222255222222552222221122222222222
// 201:111111dd2222211d2221221d5522221d5522221d5522221d1122221d2222211d
// 202:dd111111d1122222d1222222d1222552d1222552d1222552d1222112d1122222
// 203:1111111122222222212222222222552222225522222255222222112222222222
// 204:1111111122222222212222222222552222225522222255222222112222222222
// 205:1111111122222222122222212225522222255222222552222221122222222222
// 206:1111111122222222222222122255222222552222225522222211222222222222
// 207:111111dd2222211d2222221d2552221d2552221d2552221d2112221d2222211d
// 208:d1111121dd122222dd121211d1212222d1212202d1112202d1221252d1221222
// 209:1211111d222221dd112121dd2222121d2022121d2022111d2521221d2221221d
// 210:d1111122d1221222d1221222d1111122d1222212d1222212d1111122d1221222
// 211:2222222222222222222222222222222225522552255225522552255225522552
// 212:2222111d2221221d2221221d2211111d2122221d2122221d2211111d2221221d
// 213:ddd11111dd112222dd122222dd122522dd122522dd122122dd122222dd112222
// 214:11111ddd222211dd222221dd225221dd225221dd221221dd222221dd222211dd
// 215:dd111111d1122222d1221222d1222222d1222222d1222222d1222222d1122222
// 216:1111111122222222212222122222222222222222222222222222222222222222
// 217:111111dd2222211d2221221d2222221d2222221d2222221d2222221d2222211d
// 218:dd111111d1122222d1222221d1222222d1222222d1222222d1222222d1122222
// 219:1111111122222222222212222222222222222222222222222222222222222222
// 220:1111111122222222222212222222222222222222222222222222222222222222
// 221:1111111122222222212222122222222222222222222222222222222222222222
// 222:1111111122222222222122222222222222222222222222222222222222222222
// 223:111111dd2222211d1222221d2222221d2222221d2222221d2222221d2222211d
// 224:d1111222d1212222d1212222d1111121dd122222dd111212d1222122d1222122
// 225:2221111d2222121d2222121d1211111d222221dd212111dd2212221d2212221d
// 226:d1221222d1111112d1222221d1222221d1111112d1222122d1111112d1222221
// 227:2552255223322332222222222222222222222222222222222222222222222222
// 228:2221221d2111111d1222221d1222221d2111111d2212221d2111111d1222221d
// 229:ddd11111dd112222dd122222dd122122dd122222dd122222dd122222dd112222
// 230:11111ddd222211dd222221dd221221dd222221dd222221dd222221dd222211dd
// 231:dd111112d1122211d1221221d1222221d1222221d1222221d1222221d1122221
// 232:1111111114343431232323233434343423232323343434342323232334343434
// 233:211111dd1122211d1221221d1222221d1222221d1222221d1222221d1222211d
// 234:dd111111d1122222d1222122d1222222d1222222d1222222d1222222d1122222
// 235:1111112222222111221222112222221122222211222222112222221122222211
// 236:1111111114343434232323233434343423232323343434342323232334343434
// 237:1111111134343431232323233434343423232323343434342323232334343434
// 238:2211111111122222112221221122222211222222112222221122222211222222
// 239:111111dd2222211d2212221d2222221d2222221d2222221d2222221d2222211d
// 240:7777777766666666666666666666666688888888888888888888888888888888
// 241:7777777766666666666666666666666688888888888888888888888888888888
// 242:7777777766666666666666666666666688888888888888888888888888888888
// 243:7777777766666666666666666666666688888888888888888888888888888888
// 244:7777777766666666666666666666666688888888888888888888888888888888
// 245:7777777766666666666666666666666688888888888888888888888888888888
// 246:7777777766666666666666666666666688888888888888888888888888888888
// 247:7777777766666666666666666666666688888888888888888888888888888888
// 248:7777777766666666666666666666666688888888888888888888888888888888
// 249:7777777766666666666666666666666688888888888888888888888888888888
// 250:7777777766666666666666666666666688888888888888888888888888888888
// 251:7777777766666666666666666666666688888888888888888888888888888888
// 252:7777777766666666666666666666666688888888888888888888888888888888
// 253:7777777766666666666666666666666688888888888888888888888888888888
// 254:7777777766666666666666666666666688888888888888888888888888888888
// 255:7777777766666666666666666666666688888888888888888888888888888888
// </TILES1>

// <SPRITES>
// 000:fffffffffffffffffffffffffffcfffffff3fffffff3fffffffefffffffeffff
// 001:ffffffffff4444ffff4222ffff4444ffff2222ffff4444ffff2442ffff2ff2ff
// 002:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 003:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 004:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
// 016:d333333d33444433344cc44334cccc4334cccc43344cc44333444433d333333d
// 017:d333333d334444333444444334cccc4334cccc433444444333444433d333333d
// 018:d3333333334444443441444134414441344141413444141433444444d3333333
// 019:3333333344444444441144114144141441441411441144144444444433333333
// 020:3333333344444444441414111411441144141414141414114444444433333333
// 021:3333333d4444443314114443441414434411444314141443444444333333333d
// 022:d3333333334444443444414434441114344441443444444433444444d3333333
// 023:3333333344444444411141444144414441144144414441114444444433333333
// 024:3333333344444444411141114141414141414141411141114444444433333333
// 025:3333333d4444443341144443414144434114444341414443444444333333333d
// 177:ddd11111dd144444d1444444d1444444d1444444d1444444dd144444ddd11111
// 178:1111111144444444444444444444444444444444444444444444444411111111
// 179:11111ddd444441dd4444441d4444441d4444441d4444441d444441dd11111ddd
// 193:ddddddddddd11111dd144444d1444444d1444444d1444444d1444444d1444444
// 194:dddddddd11111111444444444444444444444444444444444444444444444444
// 195:dddddddd11111ddd444441dd4444441d4444441d4444441d4444441d4444441d
// 209:d1444444d1444444d1444444d1444444d1444444d1444444d1444444d1444444
// 210:4444444444444444444444444444444444444444444444444444444444444444
// 211:4444441d4444441d4444441d4444441d4444441d4444441d4444441d4444441d
// 225:d1444444d1444444d1444444d1444444d1444444dd144444ddd11111dddddddd
// 226:44444444444444444444444444444444444444444444444411111111dddddddd
// 227:4444441d4444441d4444441d4444441d4444441d444441dd11111ddddddddddd
// </SPRITES>

// <MAP>
// 013:000000003838380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 014:000000004848480000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 015:101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 016:202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 017:202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </MAP>

// <MAP1>
// 003:0000000000000000000000000000000000000000b0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 004:00000000000000000000000000000000000000008263d1e100d0d1d1e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 005:000000000000000000000000000000000000000083c3d2e200f0d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 006:000000000000000000000000000000000082720083c3d3e200f0d3d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 007:000000000000000000000000000000008584748184c3d28090a0d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 008:0000000000000000000000000000000093a3b3a3b3c3d3d2d2d2d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 009:0000000000000000000000000000000093a3b3a3b3c3d2d2d2d2d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 010:0000000000000000000000000000000093a3b3a3b3c3d3d2d2d2d3d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 011:0082818181720000000000000000000093a3b3a3b3c3d2d2d2d2d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 012:0083b4b4b4730000000000000000000093a3b3a3b3c3d3d2d2d2d3d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 013:008365b4b4730000000000000000000093a3b3a3b3c3d2d2d2d2d2d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 014:008366b4b4730000000000000000000093a3a3a3b3c3d3d2d2d2d3d2e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 015:0094b4b466740000000000000000000094a4a4a4a4c4d4d4d4d4d4d4e400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 016:121212121212121212121212121212121212121212121212121212121212000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </MAP1>

// <WAVES>
// 000:00000000ffffffff00000000ffffffff
// 001:0123456789abcdeffedcba9876543210
// 002:0123456789abcdef0123456789abcdef
// 003:ddd777777ddddaaaaadddd6666666ddd
// </WAVES>

// <SFX>
// 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000
// 001:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000
// </SFX>

// <TRACKS>
// 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </TRACKS>

// <FLAGS>

// </FLAGS>

// <PALETTE>
// 000:100a0a333025585e53a5a589eae5d1dec66697ab50516b3825150f8148819c323cc4663de48d806392af2c3c6a2c1d34
// </PALETTE>

// <PALETTE1>
// 000:100a0a333025585e53a5a589eae5d1dec66697ab50516b3825150f5227329c323cc4663de48d806392af2c3c6a2c1d34
// </PALETTE1>

